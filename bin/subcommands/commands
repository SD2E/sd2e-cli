#!/bin/bash

DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

if [ -f $DIR/../../SDK-VERSION ]; then
	SDK_VERSION=$(cat $DIR/../../SDK-VERSION)
elif [ -f $DIR/../../VERSION ]; then
	SDK_VERSION=$(cat $DIR/../../VERSION)
else
    SDK_VERSION=
fi

function print_info() {

cat << EOF

DARPA SD2E version: $SDK_VERSION
TACC Cloud API tenant: $TENANT_NAME
TACC Cloud API versions:
	Science APIs: 2.2.5
	Reactors API: dev
	TACC Accounting API: v1

EOF

}

function print_management_commands() {

cat <<EOF

Management Commands:
  sd2e commands    Display SD2E, Agave, and Abaco command summaries
  sd2e info        Display SD2E version info
  sd2e status      Check for newer versions of SD2E CLI
  sd2e upgrade     Upgrade current SD2E installation

EOF

}

function print_apps_commands() {

cat <<EOF

Apps Commands:
  apps-addupdate      Create a new or or modify an existing app
  apps-clone          Make a private copy of an existing app
  apps-delete         Delete an existing app
  apps-disable        Make an app unavailable
  apps-enable         Make an app available
  apps-erase          Erase an app completely (admin only)
  apps-history        Show history of events for an app
  apps-list           List all available apps
  apps-pems-delete    Delete app access permissions
  apps-pems-list      List app access permissions
  apps-pems-update    Modify app access permissions
  apps-publish        Make a private app public (admin only)
  apps-search         Search for apps based on attributes

EOF

}

function print_auth_commands() {

cat <<EOF

Auth Commands:
  auth-check             Check status of current OAuth bearer token
  auth-switch            Switch cached auth credentials
  auth-tokens-create     Obtain a new bearer token
  auth-tokens-refresh    Retrieve a new bearer token
  auth-tokens-revoke     Revoke an existing bearer token

EOF

}

function print_clients_commands() {

cat <<EOF

Clients Commands:
  clients-create                  Create a new API client application and API keys
  clients-delete                  Delete a client application and API keys
  clients-list                    List API clients registered to the user
  clients-subscriptions-list      List all APIs to which client is subscribed
  clients-subscriptions-update    Subscribe a client to an API

EOF

}


function print_files_commands() {

cat <<EOF

Files Commands:
  files-copy           Copy a file or folder
  files-delete         Delete a file or folder
  files-get            Download a file or folder
  files-history        Show history of events for a file
  files-import         Import a file with remote URI
  files-index          Force re-indexing of a file or folder
  files-list           List files on a remote system
  files-mkdir          Create a folder on a remote system
  files-move           Move a file or folder
  files-pems-delete    Delete file access permissions
  files-pems-list      List file access permissions
  files-pems-update    Modify file access permissions
  files-publish        Upload a file or folder and generate PostIt
  files-rename         Rename a file or folder
  files-upload         Upload a file or folder

EOF

}

function print_jobs_commands() {

cat <<EOF

Jobs Commands:
  jobs-delete            Delete an existing job
  jobs-history           Show history of events for a job
  jobs-history-search    Search through jobs history
  jobs-kick              Roll a job back to previous state
  jobs-list              List past, current, or a specific job
  jobs-output-get        Download data from jobs output
  jobs-output-list       Retrieve listing of job output
  jobs-pems-list         List job output access permissions
  jobs-pems-update       Modify job output access permissions
  jobs-restore           Restore a job from a deleted state
  jobs-resubmit          Resubmit a job
  jobs-run-this          Run a specific executable in the cloud
  jobs-search            Search for jobs based on attributes
  jobs-status            Retrieve status of job
  jobs-stop              Stop an existing job
  jobs-submit            Submit a new job
  jobs-tail              Tail the file transfer progress of a job
  jobs-template          Generate job template file

EOF

}

function print_metadata_commands() {

cat <<EOF

Metadata Commands:
  metadata-addupdate                Create a new or modify an existing metadata record
  metadata-delete                   Delete an existing metadata record
  metadata-list                     List all available metadata records
  metadata-pems-addupdate           Modify metadata record access permissions
  metadata-pems-list                List metadata record access permissions
  metadata-schema-addupdate         Create a new or modify an existing metadata schema
  metadata-schema-delete            Delete an existing metadata schema
  metadata-schema-list              List all available metadata schema
  metadata-schema-pems-addupdate    Modify metadata schema access permissions
  metadata-schema-pems-list         List metadata schema access permissions

EOF

}

function print_monitors_commands() {

cat <<EOF

Monitors Commands:
  monitors-addupdate      Create a new or modify an existing monitor
  monitors-checks-list    List checks for a given monitor
  monitors-delete         Delete an existing monitor
  monitors-disable        Disable an existing monitor
  monitors-enable         Enable an existing monitor
  monitors-fire           Force a monitor to run
  monitors-history        Show history of events for a monitor
  monitors-list           List all available monitors
  monitors-search         Search for monitors based on attributes

EOF

}

function print_notifications_commands() {

cat <<EOF

Notifications Commands:
  notifications-addupdate        Create a new or modify an existing notification
  notifications-delete           Delete an existing notification
  notifications-fire             Force a notification to run
  notifications-list             List all active notifications
  notifications-list-failures    List failed notification delivery attempts
  notifications-search           Search for notifications based on attributes

EOF

}

function print_postits_commands() {

cat <<EOF

Postits Commands:
  postits-create    Create a new postit
  postits-delete    Delete an existing postit
  postits-list      List all active postits

EOF

}

function print_profiles_commands() {

cat <<EOF

Profiles Commands:
  profiles-addupdate          Create a new or modify an existing user account (admin only)
  profiles-delete             Delete an existing user account (admin only)
  profiles-list               List API user profiles
  profiles-search             Search for API user profiles
  profiles-users-addupdate    Create a new or modify an existing internal user
  profiles-users-delete       Delete an existing internal user
  profiles-users-list         List all internal users

EOF

}

function print_requestbin_commands() {

cat <<EOF

Requestbin Commands:
  requestbin-create           Create a new requestbin instance
  requestbin-requests-list    List all requests made to a requestbin

EOF

}

function print_systems_commands() {

cat <<EOF

Systems Commands:
  systems-addupdate                Create a new or modify an existing system
  systems-clone                    Create a copy of an existing system
  systems-credentials-addupdate    Add or update user credentials on a system
  systems-credentials-delete       Delete user credentials on a system
  systems-credentials-list         List all users with credentials on a system
  systems-delete                   Delete an existing system
  systems-disable                  Make a system unavailable
  systems-enable                   Make a system available
  systems-erase                    Erase a system completely (admin only)
  systems-history                  Show history of events for a system
  systems-list                     List all existing systems
  systems-publish                  Make a private system public (admin only)
  systems-queues-addupdate         Add or update batch queues on a system
  systems-queues-delete            Delete batch queues on a system
  systems-queues-list              List all batch queues on a system
  systems-roles-addupdate          Add or update user roles on a system
  systems-roles-delete             Delete user roles on a system
  systems-roles-list               List all user roles on a system
  systems-search                   Search for systems based on attributes
  systems-setdefault               Set a given system as the user default
  systems-unpublish                Hide a public system (admin only)
  systems-unsetdefault             Unset a given system as the user default

EOF

}

function print_tags_commands() {

cat <<EOF

Tags Commands:
  tags-addupdate                 Create a new or modify an existing tag
  tags-associations-addupdate    Create a new or modify an existing tag association
  tags-associations-delete       Delete an existing tag association
  tags-delete                    Delete an existing tag
  tags-list                      List all available tags
  tags-search                    Search for tags based on attributes

EOF

}

function print_tenants_commands() {

cat <<EOF

Tenants Commands:
  tenants-init    Configure the cli for a tenant
  tenants-list    List all available tenants

EOF

}

function print_abaco_commands() {

cat <<EOF

Abaco Commands:
  list, ls, actors, images    list actors
  create, make, register      create new actor
  delete, remove, rm          remove actor
  update, change              update base Docker image
  permissions, share          list and update actor permissions
  workers, worker             view and add workers
  submit, run                 run actor
  executions                  view actor executions
  logs                        view execution logs
  init                        create a new actor project
  deploy                      build and deploy an actor

EOF

}

function print_transforms_commands() {

cat <<EOF

Transforms Commands:
  transforms-list    List all available transforms

EOF

}

function print_all_commands() {

  print_management_commands
  print_apps_commands
  print_auth_commands
  print_clients_commands
  print_files_commands
  print_jobs_commands
  print_metadata_commands
  print_monitors_commands
  print_notifications_commands
  print_postits_commands
  print_profiles_commands
  print_requestbin_commands
  print_systems_commands
  print_tags_commands
  print_tenants_commands
  print_transforms_commands
  print_abaco_commands

}

function print_help(){

cat <<EOF

Usage: sd2e commands [OPTIONS]
       sd2e commands [COMMAND CLASS]

Print a short summary of SD2E, Agave, and Abaco commands.

Options:
  -h, --help        Display this help text and exit
  -v, --version     Display version info and exit

Command Classes:
  all               Print all command summaries
  management        Print management command summaries
  apps              Print apps command summaries
  auth              Print auth command summaries
  clients           Print clients command summaries
  files             Print files command summaries
  jobs              Print jobs command summaries
  metadata          Print metadata command summaries
  monitors          Print monitors command summaries
  notifications     Print notifications command summaries
  postits           Print postits command summaries
  profiles          Print profiles command summaries
  requestbin        Print requestbin command summaries
  systems           Print systems command summaries
  tags              Print tags command summaries
  tenants           Print tenants command summaries
  transforms        Print transforms command summaries
  abaco             Print abaco command summaries

EOF

}

if [ "$1" == "-h" ] || [ "$1" == "--help" ];
then
	print_help
        exit
fi

if [ "$1" == "-v" ] || [ "$1" == "--version" ];
then
	print_info
        exit
fi

if [ -z "$1" ];
then
	print_help
	exit
fi

if [ "$1" == "all" ]
then
	print_all_commands
elif [ "$1" == "management" ]
then
	print_management_commands
elif [ "$1" == "apps" ]
then
	print_apps_commands
elif [ "$1" == "auth" ]
then
	print_auth_commands
elif [ "$1" == "clients" ]
then
	print_clients_commands
elif [ "$1" == "files" ]
then
	print_files_commands
elif [ "$1" == "jobs" ]
then
	print_jobs_commands
elif [ "$1" == "metadata" ]
then
	print_metadata_commands
elif [ "$1" == "monitors" ]
then
	print_monitors_commands
elif [ "$1" == "notifications" ]
then
	print_notifications_commands
elif [ "$1" == "postits" ]
then
	print_postits_commands
elif [ "$1" == "profiles" ]
then
	print_profiles_commands
elif [ "$1" == "requestbin" ]
then
	print_requestbin_commands
elif [ "$1" == "systems" ]
then
	print_systems_commands
elif [ "$1" == "tags" ]
then
	print_tags_commands
elif [ "$1" == "tenants" ]
then
	print_tenants_commands
elif [ "$1" == "transforms" ]
then
	print_transforms_commands
elif [ "$1" == "abaco" ]
then
	print_abaco_commands
else
	echo "'$1' is not recognized"
	echo "Please specify a valid command class (e.g 'all', 'apps', or 'jobs')"
fi


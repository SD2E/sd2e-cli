#!/usr/bin/env python

import sys
import re
import argparse
from operator import itemgetter

try:
    import requests
except ImportError:
    print "Please install Python requests>=2.12.4"
    sys.exit()


base_url = 'https://api.status.io/1.0/status/'
user_agent = 'sd2e-cloud-cli/1.3.1 (python-requests)'

statusio = {'agave': {'pageid': '53a1e022814a437c5a000781',
                              'select': 'Apps|Files|Jobs|Systems|Metadata|Notifications|Monitors|Stats|PostIts',
                              'strip': '\s?(CyVerse|Service|Server)\s?',
                              'replace': [],
                              'name': 'Agave Science APIs',
                              'url': 'http://status.agaveapi.co/'}}

# emoji mappings for statusio states
mappings = {100: u'\U0001f60e',
            300: u'\U0001f625',
            400: u'\U0001f620',
            500: u'\U0001f621',
            600: u'\U0001f637'}

class color:
    PURPLE = '\033[95m'
    CYAN = '\033[96m'
    DARKCYAN = '\033[36m'
    BLUE = '\033[94m'
    GREEN = '\033[92m'
    YELLOW = '\033[93m'
    RED = '\033[91m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'
    END = '\033[0m'


# Set up command line
parser = argparse.ArgumentParser()
parser.add_argument("--services",
                    help="individual service reports",
                    action="store_true")
parser.add_argument("--maintenance",
                    help="planned maintenance notices",
                    action="store_true")
# parser.add_argument("--incident",
#                     help="incident reports",
#                     action="store_true")
args = parser.parse_args()

PRINTPLATFORMS = True
PRINTSERVICES = False
PRINTMAINT = False
PRINTINCIDENT = False

if args.services:
    PRINTSERVICES = True
if args.maintenance:
    PRINTMAINT = True
# if args.incident:
#     PRINTINCIDENT = True

# Platforms
platforms = []
# Holds all per-service responses
services = []
# Active incidents
incidents = []
# Maintenance notices
maintenance_planned = []
maintenance_active = []

# Iterate over our collection of status.io pages
for e in statusio.keys():
    headers = {'user-agent': user_agent}
    r = requests.get(base_url + statusio[e]['pageid'], headers=headers)
    j = r.json()
    # Set up filters
    reselect = re.compile(statusio[e]['select'])
    restrip = re.compile(statusio[e]['strip'])
    overview = j['result']['status_overall']
    plat = {'name': statusio[e]['name'],
            'status': overview['status'],
            'emoji': mappings[overview['status_code']],
            'updated': overview['updated'],
            'url': statusio[e]['url']}
    platforms.append(plat)

    # Parse maintenance notes
    # Active
    maintenances_a = j['result']['maintenance']['active']
    for m in maintenances_a:
        maint = {'title': m['name'],
                 'start': m['datetime_planned_start'],
                 'stop': m['datetime_planned_end'],
                 'details': m['messages'][0]['details'],
                 'name': statusio[e]['name']}
        maintenance_active.append(maint)

    # Active
    maintenances_p = j['result']['maintenance']['upcoming']
    for m in maintenances_p:
        maint = {'title': m['name'],
                 'start': m['datetime_planned_start'],
                 'stop': m['datetime_planned_end'],
                 'details': m['messages'][0]['details'],
                 'name': statusio[e]['name']}
        maintenance_planned.append(maint)

    # Parse individual service status reports
    statuses = j['result']['status']
    for s in statuses:
        sname = s['name']
        if reselect.match(sname):
            sname = re.sub(statusio[e]['strip'], '', sname)
            if statusio[e]['replace']:
                sname = re.sub(statusio[e]['replace'][0],
                               statusio[e]['replace'][1],
                               sname)
            svc = {'name': statusio[e]['name'] + ':' + sname,
                   'status': s['status'],
                   'emoji': mappings[s['status_code']]}
            services.append(svc)

# Print out
print ""

# Maintenance
if maintenance_active:
    print color.BOLD + 'Active Maintenance' + color.END
    ma = sorted(maintenance_active, key=itemgetter('start'), reverse=True)
    for m in ma:
        print color.BOLD + u'\U0001f6a7' + '  Platform: ', m['name'] + color.END
        print m['title']
        print m['details']
        print 'Begin: ', m['start']
        print 'End: ', m['stop']
    print ""

if PRINTMAINT:
    print color.BOLD + 'Planned Maintenance' + color.END
    print ''
    if maintenance_planned:
        mp = sorted(maintenance_planned, key=itemgetter('start'), reverse=True)
        for m in mp:
            print color.BOLD + u'\U0001f6a7' + '  Platform: ', m['name'] + color.END
            print m['title']
            print m['details']
            print 'Begin: ', m['start']
            print 'End: ', m['stop']
            print ''
    else:
        print u'\U0001f477', " None"
    print ""

# Platforms
if PRINTPLATFORMS:
    print color.BOLD + 'Platform Status' + color.END
    finale = sorted(platforms, key=itemgetter('name'))
    for f in finale:
        print f['name'], ':', f['emoji'], ' ', f['url']
    print ""

# Incidents

# Print out merged results for Services
if PRINTSERVICES:
    print color.BOLD + 'Services' + color.END
    finale = sorted(services, key=itemgetter('name'))
    for f in finale:
        print f['name'], ':', f['emoji']
    print ""

print "Email " + color.BOLD + 'support@sd2e.org' + color.END + " for assistance."
